{
    "openapi": "3.0.0",
    "info": {
        "title": "LeadDesk REST API",
        "description": "LeadDesk RESTful API is used by HTTP requests sent for the the correct URI. Requests should be made using the HTTPS protocol so that traffic is encrypted to protect the authentication.",
        "contact": {
            "email": "support@leaddesk.com"
        },
        "version": ""
    },
    "paths": {
        "/activities": {
            "get": {
                "tags": [
                    "activities"
                ],
                "summary": "Fetch activities",
                "description": "Fetch activities",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "name": "search_fields",
                        "in": "query",
                        "description": "Limit the 'search' parameter to specific fields only",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "name"
                                ]
                            }
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter results based on activity name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns an array of activities.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ActivityCollection"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "activities"
                ],
                "summary": "Create a new activity",
                "description": "Create a new activity",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostActivityInput"
                            }
                        }
                    },
                    "description": "Request body containing new values"
                },
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns the created activity id.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/genericIdObject"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/activities/{id}": {
            "get": {
                "tags": [
                    "activities"
                ],
                "summary": "Fetch an activity",
                "description": "Fetch an activity.",
                "operationId": "getActivityById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Activity id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns an activity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseActivityObject"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "activities"
                ],
                "summary": "Delete an activity",
                "description": "Delete an activity",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Activity id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "activities"
                ],
                "summary": "Modify an existing activity",
                "description": "Modify an existing activity",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Activity id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchActivityInput"
                            }
                        }
                    },
                    "description": "Request body containing new values"
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api_keys/oauth": {
            "get": {
                "tags": [
                    "api_keys"
                ],
                "summary": "List OAuth clients",
                "description": "Get a full list of all OAuth clients with basic properties",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "name": "search_fields",
                        "in": "query",
                        "description": "Limit the 'search' parameter to specific fields only",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "name",
                                    "creator_id"
                                ]
                            }
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter results based on OAuth client's name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort fields ascending or descending order by using following format: {field}:{order}. Multiple fields can be combined when separated with a comma.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "id",
                                    "secret",
                                    "name",
                                    "created_at",
                                    "creator_id"
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OauthClientCollection"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "api_keys"
                ],
                "summary": "Create OAuth client",
                "description": "Create a new OAuth client with randomized id and secret",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostApiKeyOAuthInput"
                            }
                        }
                    },
                    "description": "Request body containing new values"
                },
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns created oauth client id.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OAuthIdObject"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api_keys/oauth/{id}": {
            "get": {
                "tags": [
                    "api_keys"
                ],
                "summary": "Get OAuth client properties",
                "description": "Get properties of a single OAuth client",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "oauth client id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns an OAuth client.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OauthClient"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "api_keys"
                ],
                "summary": "Delete OAuth client",
                "description": "Delete OAuth client and revoke all access_tokens and refresh_tokens related to it. This operation cannot be reverted.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "OAuth client id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "api_keys"
                ],
                "summary": "Modify OAuth client",
                "description": "Change the properties of an OAuth client",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "OAuth client id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchApiKeyOAuthInput"
                            }
                        }
                    },
                    "description": "Request body containing new values"
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/call_robots": {
            "get": {
                "tags": [
                    "call_robots"
                ],
                "summary": "Fetch call robots",
                "description": "Fetch call robots",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "name": "search_fields",
                        "in": "query",
                        "description": "Limit the 'search' parameter to specific fields only",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "name"
                                ]
                            }
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter results based on robot name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CallRobotCollection"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "call_robots"
                ],
                "summary": "Create call robot",
                "description": "Create call robots",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostCallRobotInput"
                            }
                        }
                    },
                    "description": "Request body containing new values",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns the created call robot id.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/genericIdObject"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/call_robots/{id}": {
            "get": {
                "tags": [
                    "call_robots"
                ],
                "summary": "Fetch a call robot",
                "description": "Fetch a call robot.",
                "operationId": "getCallRobotById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "CallRobot id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns a call robot.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallRobotObject"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/callbacks/{id}": {
            "delete": {
                "tags": [
                    "callbacks"
                ],
                "summary": "Delete a callback",
                "description": "Delete a callback",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Callback id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "restore_contact",
                        "in": "query",
                        "description": "Restores contact to not called state if true",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/calls/{id}": {
            "get": {
                "tags": [
                    "calls"
                ],
                "summary": "Fetch a call",
                "description": "Fetch a call.",
                "operationId": "getCallById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Call id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns a call.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallObject"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/calls/{id}/record_file": {
            "delete": {
                "tags": [
                    "calls"
                ],
                "summary": "Delete call recording",
                "description": "Delete call recording",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Call id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/calls/{id}/result": {
            "get": {
                "tags": [
                    "calls"
                ],
                "summary": "Fetch result attached to a call",
                "description": "Fetch call result attached to given call",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "call id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "result": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CallResult"
                                            }
                                        },
                                        "_links": {
                                            "properties": {
                                                "self": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "calls"
                ],
                "summary": "Set result to a call",
                "description": "Set result to a call. Only results attached to call's campaign are supported",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Call id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostCallResultInput"
                            }
                        }
                    },
                    "description": "Call result's id. This result needs to be a global result or a result attached to call's campaign"
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/campaigns/{id}/contact_lists": {
            "get": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Fetch contact lists attached to a campaign",
                "description": "Fetch contact lists attached to a campaign",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ContactListWithWeight"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Add contact lists to a campaign",
                "description": "Add contact lists to a campaign",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "property": "contact_lists",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/contactListIdAndWeight"
                                }
                            }
                        }
                    },
                    "description": "Request body comprising of objects each containing a contact_lists id and optionally contact list weight"
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Remove all contact lists from campaign",
                "description": "Remove all contact lists from campaign",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Set contact lists to a campaign",
                "description": "Set contact lists to a campaign. Removes existing contact lists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "property": "contact_lists",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/genericIdObject"
                                }
                            }
                        }
                    },
                    "description": "Request body comprising of objects each containing a contact list id"
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/campaigns/{id}/contact_lists/{contact_list_id}": {
            "delete": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Remove a contact list from campaign",
                "description": "Remove a contact list from campaign",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "contact_list_id",
                        "in": "query",
                        "description": "Contact list id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/campaigns": {
            "get": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Fetch campaigns",
                "description": "Fetch campaigns",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "name": "search_fields",
                        "in": "query",
                        "description": "Limit the 'search' parameter to specific fields only",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "name",
                                    "office"
                                ]
                            }
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter results based on campaign name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "office",
                        "in": "query",
                        "description": "Filter results based on campaign office",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CampaignCollection"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Create a new campaign",
                "description": "Create a new campaign",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostCampaignInput"
                            }
                        }
                    },
                    "description": "Request body containing new values."
                },
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns newly create campaign id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/genericIdObject"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/campaigns/{id}": {
            "get": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Fetch a campaign",
                "description": "Fetch a campaign.",
                "operationId": "getCampaignById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns a campaign.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CampaignObject"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Delete a campaign",
                "description": "Delete a campaign",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Modify an existing campaign",
                "description": "Modify an existing campaign",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchCampaignInput"
                            }
                        }
                    },
                    "description": "Request body containing new values. Overrides product group properties and entire sub-resources with given values."
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/campaigns/{id}/product_groups": {
            "get": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Fetch product groups attached to a campaign",
                "description": "Fetch product groups attached to a campaign",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ProductGroupCollection"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Add product groups to a campaign",
                "description": "Add product groups to a campaign",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/genericIdObjectArray2"
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Remove all product groups from campaign",
                "description": "Remove all product groups from campaign",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Set product groups to a campaign",
                "description": "Set product groups to a campaign. Removes existing product groups",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/genericIdObjectArray2"
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/campaigns/{id}/product_groups/{product_group_id}": {
            "delete": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Remove a product group from campaign",
                "description": "Remove a product group from campaign",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "product_group_id",
                        "in": "path",
                        "description": "Product group id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/campaigns/{id}/products": {
            "get": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Fetch products attached to a campaign",
                "description": "Fetch products attached to a campaign",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ProductCollection"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Add products to a campaign",
                "description": "Add products to a campaign",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/genericIdObjectArray"
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Remove all products from campaign",
                "description": "Remove all products from campaign",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Set products to a campaign",
                "description": "Set products to a campaign. Removes existing products",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/genericIdObjectArray"
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/campaigns/{id}/products/{product_id}": {
            "delete": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Remove a product from campaign",
                "description": "Remove a product from campaign",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "product_id",
                        "in": "query",
                        "description": "Product id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/campaigns/{id}/users": {
            "get": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Fetch users attached to a campaign",
                "description": "Fetch users attached to a campaign",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserCollection"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Add users to a campaign",
                "description": "Add users to a campaign",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/genericIdObjectArray3"
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Remove all users from campaign",
                "description": "Remove all users from campaign",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Set users to a campaign",
                "description": "Set users to a campaign. Removes existing users",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/genericIdObjectArray3"
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/campaigns/{id}/users/{user_id}": {
            "delete": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Remove a user from campaign",
                "description": "Remove a user from campaign",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Campaign id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/client": {
            "get": {
                "tags": [
                    "client"
                ],
                "summary": "Fetch details of the current client",
                "description": "Returns details about the authenticated client",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "description": "client id",
                                            "type": "integer",
                                            "example": 3
                                        },
                                        "name": {
                                            "description": "client name",
                                            "type": "string",
                                            "example": "My Client"
                                        },
                                        "created_at": {
                                            "description": "time of client creation",
                                            "type": "string",
                                            "example": "2015-10-30 08:06:13"
                                        },
                                        "identification_key": {
                                            "description": "client's identification key (requires admin priviledges)",
                                            "type": "string",
                                            "example": "c14bd526c89d2a5cc6ba96c731297cb5"
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/linksObjects"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/contact_lists/archive": {
            "get": {
                "tags": [
                    "contact_lists"
                ],
                "summary": "Fetch archived contact lists",
                "description": "Fetch archived contact lists",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "name": "search_fields",
                        "in": "query",
                        "description": "Limit the 'search' parameter to specific fields only",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "name",
                                    "office",
                                    "legend"
                                ]
                            }
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter results based on archived contact list name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "office",
                        "in": "query",
                        "description": "Filter results based on archived contact list office",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "legend",
                        "in": "query",
                        "description": "Filter results based on archived contact list legend",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort fields ascending or descending order by using following format: {field}:{order}. Multiple fields can be combined when separated with a comma.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "id",
                                    "name",
                                    "legend",
                                    "created_at",
                                    "updated_at",
                                    "office",
                                    "expiry_date",
                                    "contacts_total",
                                    "contacts_remaining",
                                    "group",
                                    "sponsor"
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ArchivedContactListCollection"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/contact_lists/archive/{id}": {
            "delete": {
                "tags": [
                    "contact_lists"
                ],
                "summary": "Delete an archived contact list",
                "description": "Delete an archived contact list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Archived contact list id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/contact_lists/archive/{id}/operations/unarchive": {
            "post": {
                "tags": [
                    "contact_lists"
                ],
                "summary": "Unarchive an archived contact list",
                "description": "Unarchive an archived contact list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Archived contact list id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UnarchiveArchivedContactListInput"
                            }
                        }
                    },
                    "description": "Request body containing new values",
                    "required": true
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/contact_lists/archive/{id}/operations/anonymize": {
            "post": {
                "tags": [
                    "contact_lists"
                ],
                "summary": "Anonymize an archived contact list",
                "description": "Anonymize an archived contact list. The anonymize operation will happen with a delay (usually during the next night).",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Archived contact list id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AnonymizeArchivedContactListInput"
                            }
                        }
                    },
                    "description": "Request body containing new values",
                    "required": true
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/contact_lists": {
            "get": {
                "tags": [
                    "contact_lists"
                ],
                "summary": "Fetch contact lists",
                "description": "Fetch contact lists",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "name": "search_fields",
                        "in": "query",
                        "description": "Limit the 'search' parameter to specific fields only",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "name",
                                    "office"
                                ]
                            }
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter results based on contact list name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "office",
                        "in": "query",
                        "description": "Filter results based on contact list office",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ContactListCollection"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/contact_lists/{id}/operations/archive": {
            "post": {
                "tags": [
                    "contact_lists"
                ],
                "summary": "Archive a contact list",
                "description": "Archive a contact list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Contact list id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customization/app_functions": {
            "get": {
                "tags": [
                    "customization"
                ],
                "summary": "Fetch list of all external application function",
                "description": "Fetch list of all external application functions.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "name": "search_fields",
                        "in": "query",
                        "description": "Limit the 'search' parameter to specific fields only",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "location"
                                ]
                            }
                        }
                    },
                    {
                        "name": "location",
                        "in": "query",
                        "description": "Filter results based on external application location in LeadDesk",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns an array of external application functions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CustomAppFunction"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "customization"
                ],
                "summary": "Create a new external application function",
                "description": "Create a new external application function",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostCustomAppFunctionInput"
                            }
                        }
                    },
                    "description": "Request body containing new values"
                },
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns the created external application function id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/genericIdObject"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customization/app_functions/{id}": {
            "get": {
                "tags": [
                    "customization"
                ],
                "summary": "Fetch an external application function",
                "description": "Fetch an external application function",
                "operationId": "getCustomAppFunctionById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "External application function id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns external application function.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomAppFunctionObject"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "customization"
                ],
                "summary": "Delete an external application function",
                "description": "Delete an external application function",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "External application function id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "customization"
                ],
                "summary": "Modify an existing external application function",
                "description": "Modify an existing external application function",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "App function id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomAppFunctionInput"
                            }
                        }
                    },
                    "description": "Request body containing new values"
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customization/page_blocks": {
            "get": {
                "tags": [
                    "customization"
                ],
                "summary": "Fetch customized page blocks",
                "description": "Fetch customized page blocks",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "name": "search_fields",
                        "in": "query",
                        "description": "Limit the 'search' parameter to specific fields only",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "location"
                                ]
                            }
                        }
                    },
                    {
                        "name": "location",
                        "in": "query",
                        "description": "Filter results based on custom page block location",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns an array of customized page blocks.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CustomPageBlock"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "customization"
                ],
                "summary": "Create a new customized page block",
                "description": "Create a new customized page block",
                "requestBody": {
                    "$ref": "#/components/requestBodies/CustomPageBlocksInput"
                },
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns the created custom page block id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/genericIdObject"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customization/page_blocks/{id}": {
            "get": {
                "tags": [
                    "customization"
                ],
                "summary": "Fetch a custom page block",
                "description": "Fetch a custom page block",
                "operationId": "getCustomPageBlockById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Custom page block id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation returns page block object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPageBlockObject"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "customization"
                ],
                "summary": "Delete a custom page block",
                "description": "Delete a custom page block",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Custom page block id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "customization"
                ],
                "summary": "Modify an existing custom page block",
                "description": "Modify an existing custom page block",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Custom page block id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/CustomPageBlocksInput"
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customization/pages": {
            "get": {
                "tags": [
                    "customization"
                ],
                "summary": "Fetch customized pages",
                "description": "Fetch customized pages",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "name": "search_fields",
                        "in": "query",
                        "description": "Limit the 'search' parameter to specific fields only",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "location"
                                ]
                            }
                        }
                    },
                    {
                        "name": "location",
                        "in": "query",
                        "description": "Filter results based on custom page location",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation returns an array of customized pages.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CustomPage"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "customization"
                ],
                "summary": "Create a new customized page",
                "description": "Create a new customized page",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostCustomPageInput"
                            }
                        }
                    },
                    "description": "Request body containing new values"
                },
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns the created custom page id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/genericIdObject"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customization/pages/{id}": {
            "get": {
                "tags": [
                    "customization"
                ],
                "summary": "Fetch a custom page",
                "description": "Fetch a custom page",
                "operationId": "getCustomPageById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Custom page id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns customized page settings.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPageObject"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "customization"
                ],
                "summary": "Delete a custom page",
                "description": "Delete a custom page",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Custom page id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "customization"
                ],
                "summary": "Modify an existing custom page",
                "description": "Modify an existing custom page",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Custom page id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomPageInput"
                            }
                        }
                    },
                    "description": "Request body containing new values"
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/doc": {
            "get": {
                "tags": [
                    "doc"
                ],
                "summary": "API Documentation",
                "description": "Returns Swagger/OpenAPI specification formatted API documentation you are currently reading.",
                "responses": {
                    "200": {
                        "description": "JSON formatted documentation. See https://swagger.io/docs/ for more info."
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorExample"
                                }
                            }
                        }
                    }
                },
                "security": []
            }
        },
        "/gdpr/contact": {
            "get": {
                "tags": [
                    "gdpr"
                ],
                "summary": "Fetch GDPR contact data",
                "description": "Fetch GDPR contact data. At least one of the search parameters is mandatory. Multiple parameters are joined with the logical OR operator.",
                "parameters": [
                    {
                        "name": "phone",
                        "in": "query",
                        "description": "Contact's phone number (international format, must begin with a plus sign)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ssc",
                        "in": "query",
                        "description": "Contact's social security code",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Contact's email address",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation returns collections of contact data objects.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "contacts": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GdprContact"
                                            }
                                        },
                                        "calls": {
                                            "properties": {
                                                "agent": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/GdprAgentCall"
                                                    }
                                                },
                                                "robot": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/GdprRobotCall"
                                                    }
                                                },
                                                "queue": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/GdprQueueCall"
                                                    }
                                                },
                                                "transfers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/GdprTransfer"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "orders": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GdprOrder"
                                            }
                                        },
                                        "callbacks": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GdprCallback"
                                            }
                                        },
                                        "sms": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GdprSms"
                                            }
                                        },
                                        "emails": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GdprEmail"
                                            }
                                        },
                                        "phonebook_contacts": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GdprPhonebookContact"
                                            }
                                        },
                                        "manuscript_results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GdprManuscriptResult"
                                            }
                                        },
                                        "calendar": {
                                            "properties": {
                                                "meetings": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/GdprCalendarMeeting"
                                                    }
                                                },
                                                "orders": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/GdprCalendarOrder"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "gdpr"
                ],
                "summary": "Delete and anonymize GDPR contact data",
                "description": "Delete and anonymize GDPR contact data (NOTE: order data will be preserved). At least one of the search parameters is mandatory. Multiple parameters are joined with the logical OR operator.",
                "parameters": [
                    {
                        "name": "phone",
                        "in": "query",
                        "description": "Contact's phone number (international format, must begin with a plus sign)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ssc",
                        "in": "query",
                        "description": "Contact's social security code",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Contact's email address",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/inbound/queues": {
            "get": {
                "tags": [
                    "inbound"
                ],
                "summary": "Fetch list of all inbound phone call queues",
                "description": "Fetch list of all inbound phone call queues",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "name": "search_fields",
                        "in": "query",
                        "description": "Limit the 'search' parameter to specific fields only",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "name",
                                    "number"
                                ]
                            }
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter results based on queue name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "number",
                        "in": "query",
                        "description": "Filter results based on queue phone number",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/InboundQueueCollection"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/inbound/queues/{id}": {
            "get": {
                "tags": [
                    "inbound"
                ],
                "summary": "Fetch inbound phone call queue info",
                "description": "Fetch inbound phone call queue info by given id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Queue id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InboundQueue"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/inbound/queues/skills": {
            "get": {
                "tags": [
                    "inbound"
                ],
                "summary": "Fetch list of all inbound phone call queues with inbound skills included",
                "description": "Fetch list of all inbound phone call queues with inbound skills included",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "name": "search_fields",
                        "in": "query",
                        "description": "Limit the 'search' parameter to specific fields only",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "name",
                                    "number"
                                ]
                            }
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter results based on queue name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "number",
                        "in": "query",
                        "description": "Filter results based on queue phone number",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/InboundQueueCollectionSkills"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/inbound/queues/{id}/skills": {
            "get": {
                "tags": [
                    "inbound"
                ],
                "summary": "Fetch inbound phone call queue skills",
                "description": "Fetch inbound phone call queue skills",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Queue id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "property": "collection",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Skill"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/oauth/access-token#password": {
            "post": {
                "tags": [
                    "oauth"
                ],
                "summary": "Authenticate with LeadDesk user credentials (Password Grant)",
                "description": "Authenticate to Rest API client with permissions of a LeadDesk user. All rest API users/clients can use this authentication method to access the API. If authentication is successfull then you can use the received access token to authorize further requests to the other rest API resources e.g. /users. Please ignore the fragment part in the path. It was added only because Open API specification does not allow duplicate paths.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OAuthPasswordGrantRequest"
                            }
                        }
                    },
                    "description": "Authentication"
                },
                "responses": {
                    "200": {
                        "description": "Successful authentication",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OAuthAccessTokenResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                },
                "security": []
            }
        },
        "/oauth/access-token#client": {
            "post": {
                "tags": [
                    "oauth"
                ],
                "summary": "Authenticate with LeadDesk client (LeadDesk Client Grant)",
                "description": "Authenticate to Rest API with a preconfigured access to certain LeadDesk client. This authentication method is only available if it has been enabled for your rest API client_id. If authentication is successfull then you can use the received access token to authorize further requests to the other rest API resources e.g. /users. Please ignore the fragment part in the path. It was added only because Open API specification does not allow duplicate paths.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OAuthLeadDeskClientGrantRequest"
                            }
                        }
                    },
                    "description": "Authentication"
                },
                "responses": {
                    "200": {
                        "description": "Successful authentication",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OAuthAccessTokenResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                },
                "security": []
            }
        },
        "/oauth/access-token#user": {
            "post": {
                "tags": [
                    "oauth"
                ],
                "summary": "Authenticate with LeadDesk user (LeadDesk User Grant)",
                "description": "Authenticate to Rest API with a preconfigured access to certain LeadDesk client's users. This authentication method is only available if it has been enabled for your rest API client_id. If authentication is successfull then you can use the received access token to authorize further requests to the other rest API resources e.g. /users. Please ignore the fragment part in the path. It was added only because Open API specification does not allow duplicate paths.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OAuthLeadDeskUserGrantRequest"
                            }
                        }
                    },
                    "description": "Authentication"
                },
                "responses": {
                    "200": {
                        "description": "Successful authentication",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OAuthAccessTokenResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                },
                "security": []
            }
        },
        "/oauth/access-token#refresh": {
            "post": {
                "tags": [
                    "oauth"
                ],
                "summary": "Refresh access token (Refresh Grant)",
                "description": "If access token is expired or you need to otherwise invalidate current access token then use refresh token request. You will get a new access token and invalidate the existing one. New access token can be used the same way as before. Please ignore the fragment part in the path. It was added only because Open API specification does not allow duplicate paths.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OAuthRefreshGrantRequest"
                            }
                        }
                    },
                    "description": "Authentication"
                },
                "responses": {
                    "200": {
                        "description": "Successful authentication",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OAuthAccessTokenResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                },
                "security": []
            }
        },
        "/product_groups": {
            "get": {
                "tags": [
                    "product_groups"
                ],
                "summary": "Fetch product groups",
                "description": "Fetch product groups",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "name": "search_fields",
                        "in": "query",
                        "description": "Limit the 'search' parameter to specific fields only",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "name",
                                    "office"
                                ]
                            }
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter results based on product group name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "office",
                        "in": "query",
                        "description": "Filter results based on product group office",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ProductGroupCollection"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "product_groups"
                ],
                "summary": "Create a new product group",
                "description": "Create a new product group",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostProductGroup"
                            }
                        }
                    },
                    "description": "Request body containing new values."
                },
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns newly created product group id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/genericIdObject"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/product_groups/{id}": {
            "get": {
                "tags": [
                    "product_groups"
                ],
                "summary": "Fetch a product group",
                "description": "Fetch a product group.",
                "operationId": "getProductGroupById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product group id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns a product group.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductGroup"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "product_groups"
                ],
                "summary": "Delete a product group",
                "description": "Delete a product group",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product group id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "product_groups"
                ],
                "summary": "Modify an existing product group",
                "description": "Modify an existing product group",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product group id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchProductGroup"
                            }
                        }
                    },
                    "description": "Request body containing new values. Overrides product group properties and entire sub-resources with given values."
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/product_groups/{id}/products": {
            "post": {
                "tags": [
                    "product_groups"
                ],
                "summary": "Add products to a product group",
                "description": "Add products to a product group",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product group id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/genericIdObjectArray"
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "product_groups"
                ],
                "summary": "Remove all products from product group",
                "description": "Remove all products from product group",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product group id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "product_groups"
                ],
                "summary": "Override product group products with new products",
                "description": "Override product group products with new products",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product group id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/genericIdObjectArray"
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/product_groups/{id}/products/{product_id}": {
            "delete": {
                "tags": [
                    "product_groups"
                ],
                "summary": "Remove a product from product group",
                "description": "Remove a product from product group",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product group id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "product_id",
                        "in": "query",
                        "description": "Product id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/products/{id}/options": {
            "get": {
                "tags": [
                    "products"
                ],
                "summary": "Fetch products options",
                "description": "Fetch products options",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "name": "search_fields",
                        "in": "query",
                        "description": "Limit the 'search' parameter to specific fields only",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "name"
                                ]
                            }
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter results based on option name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ProductOptionCollection"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/products/{id}/options/{optionid}": {
            "get": {
                "tags": [
                    "products"
                ],
                "summary": "Fetch a product option",
                "description": "Fetch a product option",
                "operationId": "getProductById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "optionid",
                        "in": "query",
                        "description": "Option id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns a product.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductOptionObject"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "tags": [
                    "products"
                ],
                "summary": "Fetch products",
                "description": "Fetch products",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "name": "search_fields",
                        "in": "query",
                        "description": "Limit the 'search' parameter to specific fields only",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "name",
                                    "office",
                                    "product_code"
                                ]
                            }
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter results based on product name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "office",
                        "in": "query",
                        "description": "Filter results based on product office",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "product_code",
                        "in": "query",
                        "description": "Filter results based on product code",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ProductCollection"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "products"
                ],
                "summary": "Create a new product",
                "description": "Create a new product",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostProductInput"
                            }
                        }
                    },
                    "description": "Request body containing new values"
                },
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns created product id.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/genericIdObject"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "tags": [
                    "products"
                ],
                "summary": "Fetch a product",
                "description": "Fetch a product.",
                "operationId": "getProductById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns a product.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductObject"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "products"
                ],
                "summary": "Delete a product",
                "description": "Delete a product",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "products"
                ],
                "summary": "Modify an existing product",
                "description": "Modify an existing product",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchProductInput"
                            }
                        }
                    },
                    "description": "Request body containing new values"
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/public_keys/signature/pem": {
            "get": {
                "tags": [
                    "public_keys"
                ],
                "summary": "Fetch public signature keys (PEM format)",
                "description": "Private signature key is used to sign JWT originating from LeadDesk. Use public keys to validate JWT authenticity. Returns keys in PEM format.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PublicKeyPem"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx and 5xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorExample"
                                }
                            }
                        }
                    }
                },
                "security": []
            }
        },
        "/public_keys/signature/{kid}/pem": {
            "get": {
                "tags": [
                    "public_keys"
                ],
                "summary": "Fetch public signature key (PEM format)",
                "description": "Private signature key is used to sign JWT originating from LeadDesk. Use public keys to validate JWT authenticity. Returns key in PEM format",
                "parameters": [
                    {
                        "name": "kid",
                        "in": "query",
                        "description": "Key id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PublicKeyPem"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx and 5xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundErrorExample"
                                }
                            }
                        }
                    }
                },
                "security": []
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Fetch list of users",
                "description": "Fetch list of users",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "name": "search_fields",
                        "in": "query",
                        "description": "Limit the 'search' parameter to specific fields only",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "name",
                                    "username",
                                    "office"
                                ]
                            }
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter results based on user name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "in": "query",
                        "description": "Filter results based on user username",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "office",
                        "in": "query",
                        "description": "Filter results based on user office",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserCollection"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Fetch user info",
                "description": "Fetch user info",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}/login_token": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get login token for user",
                "description": "Creates a short lived login token. Login token can be used to login into LeadDesk UI. This is done by sending the received token value as a `login-token` POST parameter into LeadDesk login page. Login token can only be created for active users.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "meta",
                        "in": "query",
                        "description": "Additional free text meta information that will be bound to the login token and which will be logged if the login-token is actually used to login into LeadDesk. Meta value has no functional purpose.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserLoginToken"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/skills": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Fetch list of users. Returns basic info and inbound skills.",
                "description": "Fetch list of users. Returns basic info and inbound skills.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "name": "search_fields",
                        "in": "query",
                        "description": "Limit the 'search' parameter to specific fields only",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "name",
                                    "username",
                                    "office"
                                ]
                            }
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter results based on user name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "in": "query",
                        "description": "Filter results based on user username",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "office",
                        "in": "query",
                        "description": "Filter results based on user office",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "collection": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserCollectionSkills"
                                            }
                                        },
                                        "_links": {
                                            "$ref": "#/components/schemas/links"
                                        },
                                        "_meta": {
                                            "$ref": "#/components/schemas/meta"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}/skills": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Fetch user inbound skills",
                "description": "Fetch user inbound skills",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation return array of user skills",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "property": "collection",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SkillWithPoints"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "users"
                ],
                "summary": "Change user's inbound skills",
                "description": "Change user's inbound skills. Skill items given in array will replace user's current skills.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "property": "skills",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SkillInput"
                                }
                            }
                        }
                    },
                    "description": "Request body containing new values"
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Server rejection. Covers all HTTP 4xx errors except validation error.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiException"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "security": {
        "Bearer": []
    },
    "servers": [
        {
            "url": "https://api.cloud.leaddesk.com/stable"
        }
    ],
    "components": {
        "parameters": {
            "page": {
                "name": "page",
                "in": "query",
                "description": "Page number",
                "required": false,
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                }
            },
            "per_page": {
                "name": "per_page",
                "in": "query",
                "description": "Amount of items per page",
                "required": false,
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 500,
                    "default": 25
                }
            },
            "search": {
                "name": "search",
                "in": "query",
                "description": "Search term used to filter collection results. Searches through all the searchable fields in the resource.",
                "required": false,
                "schema": {
                    "type": "string"
                }
            }
        },
        "responses": {
            "204": {
                "description": "Request was fulfilled but there's no content to be sent back."
            },
            "400": {
                "description": "Bad Request - Generic error when something in the request is wrong. It could be lacking some mandatory fields or has non-acceptable values for properties. Check the response JSON object for more details."
            },
            "401": {
                "description": "Unauthorized - Error which is caused mainly by invalid authentication. Authorization token could be expired or invalid."
            },
            "403": {
                "description": "Forbidden - You are not allowed to do such operation. E.g. creation with read-only token."
            },
            "404": {
                "description": "Not Found - When requested resource is not available, then not found error is usually returned. This can also happen if resource exists, but you don't have visibility to it (e.g. teamleader attempting to modify campaign from different office)."
            },
            "405": {
                "description": "Method Not Allowed - Given HTTP method is not allowed with requested resource. e.g. Some resources can't be deleted."
            },
            "422": {
                "description": "Unprocessable Entity - Request included parameter values that are not valid or are erroneous."
            },
            "500": {
                "description": "Internal Server Error - Something is wrong in LeadDesk infrastructure. Request could not be fulfilled at the moment, but it should be runnable later on when problem is fixed. Check the response JSON object for more details."
            },
            "501": {
                "description": "Not Implemented - Error caused by requesting an operation that is not yet fully implemented."
            },
            "503": {
                "description": "Service Unavailable - Error that will be reported when API has been completely or partially been disabled."
            }
        },
        "requestBodies": {
            "genericIdObjectArray": {
                "content": {
                    "application/json": {
                        "schema": {
                            "property": "products",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/genericIdObject"
                            }
                        }
                    }
                },
                "description": "Request body comprising of objects each containing a product id"
            },
            "genericIdObjectArray2": {
                "content": {
                    "application/json": {
                        "schema": {
                            "property": "product_groups",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/genericIdObject"
                            }
                        }
                    }
                },
                "description": "Request body comprising of objects each containing a product group id"
            },
            "genericIdObjectArray3": {
                "content": {
                    "application/json": {
                        "schema": {
                            "property": "users",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/genericIdObject"
                            }
                        }
                    }
                },
                "description": "Request body comprising of objects each containing a user id"
            },
            "CustomPageBlocksInput": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/CustomPageBlocksInput"
                        }
                    }
                },
                "description": "Request body containing new values"
            }
        },
        "securitySchemes": {
            "Bearer": {
                "type": "apiKey",
                "description": "Since OpenAPI specification v2.0 does not support Bearer authentication this is just a placeholder. Access token should be passed in Authorization header as 'Bearer {access-token}'. Therefore the 'try it' functionality does not yet work in Swagger UI either.",
                "name": "Authorization",
                "in": "header"
            }
        },
        "schemas": {
            "genericIdObject": {
                "properties": {
                    "id": {
                        "type": "integer"
                    }
                },
                "xml": {
                    "name": "genericIdObject"
                }
            },
            "links": {
                "properties": {
                    "self": {
                        "type": "string"
                    },
                    "prev": {
                        "type": "string"
                    },
                    "next": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "links"
                }
            },
            "linksObjects": {
                "properties": {
                    "self": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "linksObjects"
                }
            },
            "meta": {
                "properties": {
                    "total": {
                        "type": "integer"
                    }
                },
                "xml": {
                    "name": "meta"
                }
            },
            "ApiException": {
                "properties": {
                    "error": {
                        "description": "Logical key of an error",
                        "type": "string",
                        "example": "access_denied"
                    },
                    "error_description": {
                        "description": "Human readable description of an error",
                        "type": "string",
                        "example": "The resource owner or authorization server denied the request."
                    }
                },
                "xml": {
                    "name": "ApiException"
                }
            },
            "ValidationException": {
                "properties": {
                    "error": {
                        "description": "Logical key of an error",
                        "type": "string",
                        "example": "validation_failed"
                    },
                    "error_description": {
                        "description": "Human readable description of an error",
                        "type": "string",
                        "example": "Parameter validation failed"
                    },
                    "error_validation": {
                        "description": "Validation error JSON object for more specific information.",
                        "type": "object",
                        "example": "{'name': ['The name field is required.']}"
                    }
                },
                "xml": {
                    "name": "ValidationException"
                }
            },
            "ActivitySearchableFields": {
                "properties": {
                    "name": {
                        "description": "Activity name",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "ActivitySearchableFields"
                }
            },
            "PostActivityInput": {
                "required": [
                    "name",
                    "billable",
                    "payable"
                ],
                "properties": {
                    "name": {
                        "description": "Activity name",
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "billable": {
                        "description": "Is activity billable",
                        "type": "boolean"
                    },
                    "payable": {
                        "description": "Is activity payable",
                        "type": "boolean"
                    }
                },
                "xml": {
                    "name": "PostActivityInput"
                }
            },
            "ResponseActivityObject": {
                "xml": {
                    "name": "ResponseActivityObject"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Activity"
                    },
                    {
                        "$ref": "#/components/schemas/linksObjects"
                    }
                ]
            },
            "PatchActivityInput": {
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "billable": {
                        "type": "boolean"
                    },
                    "payable": {
                        "type": "boolean"
                    }
                },
                "xml": {
                    "name": "PatchActivityInput"
                }
            },
            "OAuthIdObject": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": "PCEmnxLXNdUzc46kANjhPzv7BEj56zXB2AwB5qFW"
                    }
                },
                "xml": {
                    "name": "OAuthIdObject"
                }
            },
            "ApiKeysOAuthSearchableFields": {
                "properties": {
                    "name": {
                        "description": "OAuth client's name",
                        "type": "string"
                    },
                    "creator_id": {
                        "description": "OAuth client's creator id",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "ApiKeysOAuthSearchableFields"
                }
            },
            "PostApiKeyOAuthInput": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "OAuth client's name",
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 1,
                        "example": "My first OAuth client"
                    }
                },
                "xml": {
                    "name": "PostApiKeyOAuthInput"
                }
            },
            "PatchApiKeyOAuthInput": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "OAuth client's name",
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 1,
                        "example": "My first OAuth client"
                    }
                },
                "xml": {
                    "name": "PatchApiKeyOAuthInput"
                }
            },
            "CallRobotSearchableFields": {
                "properties": {
                    "name": {
                        "description": "Call robot name",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "CallRobotSearchableFields"
                }
            },
            "PostCallRobotInput": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Call robot name",
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 2
                    }
                },
                "xml": {
                    "name": "PostCallRobotInput"
                }
            },
            "PostCallResultInput": {
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "description": "Result id",
                        "type": "integer"
                    }
                },
                "xml": {
                    "name": "PostCallResultInput"
                }
            },
            "contactListIdAndWeight": {
                "properties": {
                    "id": {
                        "description": "Contact list id",
                        "type": "integer"
                    },
                    "weight": {
                        "description": "Contact list weight",
                        "type": "integer"
                    }
                },
                "xml": {
                    "name": "contactListIdAndWeight"
                }
            },
            "CampaignSearchableFields": {
                "properties": {
                    "name": {
                        "description": "Campaign name",
                        "type": "string"
                    },
                    "office": {
                        "description": "Campaign office",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "CampaignSearchableFields"
                }
            },
            "PostCampaignInput": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Campaign name",
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 1
                    },
                    "desc": {
                        "description": "Campaign description",
                        "type": "string"
                    },
                    "office": {
                        "description": "Campaign office name",
                        "type": "string",
                        "maxLength": 100
                    },
                    "disabled": {
                        "description": "Is campaign disabled. NOTE! Users cannot be attached to disabled campaign. If campaign is disabled current users are detached",
                        "type": "boolean"
                    },
                    "sponsor": {
                        "description": "Sponsor name",
                        "type": "string",
                        "maxLength": 100
                    },
                    "contactmanager_id": {
                        "description": "Contact manager id (user id)",
                        "type": "integer"
                    },
                    "call_methods": {
                        "$ref": "#/components/schemas/callMethods"
                    },
                    "optional_settings": {
                        "$ref": "#/components/schemas/optionalSettings"
                    },
                    "contact_settings": {
                        "$ref": "#/components/schemas/contactSettings"
                    },
                    "products": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/genericIdObject"
                        }
                    },
                    "product_groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/genericIdObject"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/genericIdObject"
                        }
                    },
                    "contact_lists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/contactListIdAndWeight"
                        }
                    }
                },
                "xml": {
                    "name": "PostCampaignInput"
                }
            },
            "PatchCampaignInput": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Campaign name",
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 1
                    },
                    "desc": {
                        "description": "Campaign description",
                        "type": "string"
                    },
                    "office": {
                        "description": "Campaign office name",
                        "type": "string",
                        "maxLength": 100
                    },
                    "disabled": {
                        "description": "Is campaign disabled. NOTE! Users cannot be attached to disabled campaign. If campaign is disabled current users are detached",
                        "type": "boolean"
                    },
                    "sponsor": {
                        "description": "Sponsor name",
                        "type": "string",
                        "maxLength": 100
                    },
                    "contactmanager_id": {
                        "description": "Contact manager id (user id)",
                        "type": "integer"
                    },
                    "call_methods": {
                        "$ref": "#/components/schemas/callMethods"
                    },
                    "optional_settings": {
                        "$ref": "#/components/schemas/optionalSettings"
                    },
                    "contact_settings": {
                        "$ref": "#/components/schemas/contactSettings"
                    },
                    "products": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/genericIdObject"
                        }
                    },
                    "product_groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/genericIdObject"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/genericIdObject"
                        }
                    },
                    "contact_lists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/contactListIdAndWeight"
                        }
                    }
                },
                "xml": {
                    "name": "PatchCampaignInput"
                }
            },
            "ArchivedContactListSearchableFields": {
                "properties": {
                    "name": {
                        "description": "Contact list name",
                        "type": "string"
                    },
                    "office": {
                        "description": "Contact list office",
                        "type": "string"
                    },
                    "legend": {
                        "description": "Contact list legend",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "ArchivedContactListSearchableFields"
                }
            },
            "UnarchiveArchivedContactListInput": {
                "required": [
                    "expiry_date"
                ],
                "properties": {
                    "expiry_date": {
                        "description": "New expiry date for the contact list",
                        "type": "string",
                        "format": "date",
                        "example": "2018-04-25"
                    }
                },
                "xml": {
                    "name": "UnarchiveArchivedContactListInput"
                }
            },
            "AnonymizeArchivedContactListInput": {
                "required": [
                    "fields"
                ],
                "properties": {
                    "fields": {
                        "description": "Fields that should be set to anonymized (set to NULL).",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "phone",
                                "email",
                                "name",
                                "gender",
                                "ssc",
                                "birth_year",
                                "address",
                                "postal",
                                "city",
                                "country",
                                "title",
                                "company",
                                "vatin",
                                "www",
                                "comment",
                                "other1",
                                "other2",
                                "other3",
                                "other4",
                                "other5",
                                "other6",
                                "other7",
                                "other8",
                                "other9",
                                "other10",
                                "other11",
                                "other12",
                                "other13",
                                "other14",
                                "other15",
                                "other16",
                                "other17",
                                "other18",
                                "other19",
                                "other20",
                                "other21",
                                "other22",
                                "other23",
                                "other24",
                                "other25",
                                "other26",
                                "other27",
                                "other28",
                                "other29",
                                "other30",
                                "other31",
                                "other32",
                                "other33",
                                "other34",
                                "other35"
                            ]
                        },
                        "example": [
                            "name",
                            "phone"
                        ]
                    }
                },
                "xml": {
                    "name": "AnonymizeArchivedContactListInput"
                }
            },
            "ContactListSearchableFields": {
                "properties": {
                    "name": {
                        "description": "Contact list name",
                        "type": "string"
                    },
                    "office": {
                        "description": "Contact list office",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "ContactListSearchableFields"
                }
            },
            "CustomAppFunctionSearchableFields": {
                "properties": {
                    "location": {
                        "description": "Custom page location",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "CustomAppFunctionSearchableFields"
                }
            },
            "CustomAppFunctionInput": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "External application function name",
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 1
                    },
                    "location": {
                        "description": "Location for the application function in LeadDesk",
                        "type": "string",
                        "enum": [
                            "admin.contact-lists.toolbar",
                            "admin.campaign-list.toolbar"
                        ]
                    },
                    "url": {
                        "description": "URL pointing to external application endpoint",
                        "type": "string",
                        "maxLength": 2048,
                        "minLength": 1
                    },
                    "width": {
                        "description": "External application function dialog width in pixels",
                        "type": "integer"
                    },
                    "height": {
                        "description": "External application function dialog height in pixels",
                        "type": "integer"
                    },
                    "icon": {
                        "description": "This value can point directly to URL holding the icon image. See LeadDesk wiki for more about icon.",
                        "type": "string"
                    },
                    "sandbox": {
                        "description": "Iframe sandbox attributes (separated by space)",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "allow-forms",
                            "allow-pointer-lock",
                            "allow-popups",
                            "allow-same-origin",
                            "allow-scripts",
                            "allow-top-navigation"
                        ]
                    }
                },
                "xml": {
                    "name": "CustomAppFunctionInput"
                }
            },
            "PostCustomAppFunctionInput": {
                "required": [
                    "name",
                    "location",
                    "url"
                ],
                "xml": {
                    "name": "PostCustomAppFunctionInput"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CustomAppFunctionInput"
                    }
                ]
            },
            "CustomPageBlocksSearchableFields": {
                "properties": {
                    "location": {
                        "description": "Custom page block location",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "CustomPageBlocksSearchableFields"
                }
            },
            "CustomPageBlocksInput": {
                "required": [
                    "name",
                    "location",
                    "url"
                ],
                "properties": {
                    "name": {
                        "description": "Custom page block name",
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 1
                    },
                    "location": {
                        "description": "Location for the custom page block in LeadDesk",
                        "type": "string",
                        "enum": [
                            "campaign-editor"
                        ]
                    },
                    "url": {
                        "description": "Custom page block endpoint URL",
                        "type": "string",
                        "maxLength": 2048,
                        "minLength": 1
                    },
                    "sandbox": {
                        "description": "Iframe sandbox attributes (separated by space)",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "allow-forms",
                            "allow-pointer-lock",
                            "allow-popups",
                            "allow-same-origin",
                            "allow-scripts",
                            "allow-top-navigation"
                        ]
                    },
                    "height": {
                        "description": "Custom page block iframe height in pixels",
                        "type": "integer"
                    }
                },
                "xml": {
                    "name": "CustomPageBlocksInput"
                }
            },
            "CustomPageSearchableFields": {
                "properties": {
                    "location": {
                        "description": "Custom page location",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "CustomPageSearchableFields"
                }
            },
            "CustomPageInput": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Custom page name",
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 1
                    },
                    "location": {
                        "description": "Location for the custom page",
                        "type": "string",
                        "enum": [
                            "dashboard",
                            "statistics",
                            "campaigns",
                            "agents_mng",
                            "calling_list_management",
                            "product",
                            "b2b_mng",
                            "qatab",
                            "inbound",
                            "general_settings"
                        ]
                    },
                    "url": {
                        "description": "Custom page URL",
                        "type": "string",
                        "maxLength": 2048,
                        "minLength": 1
                    },
                    "sandbox": {
                        "description": "Iframe sandbox attributes (separated by space)",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "allow-forms",
                            "allow-pointer-lock",
                            "allow-popups",
                            "allow-same-origin",
                            "allow-scripts",
                            "allow-top-navigation"
                        ]
                    },
                    "height": {
                        "description": "Custom page iframe height in pixels",
                        "type": "integer"
                    }
                },
                "xml": {
                    "name": "CustomPageInput"
                }
            },
            "PostCustomPageInput": {
                "required": [
                    "name",
                    "location",
                    "url"
                ],
                "xml": {
                    "name": "PostCustomPageInput"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CustomPageInput"
                    }
                ]
            },
            "OAuthPasswordGrantRequest": {
                "required": [
                    "grant_type",
                    "client_id",
                    "client_secret",
                    "username",
                    "password"
                ],
                "properties": {
                    "grant_type": {
                        "description": "Must be 'password' for password grant.",
                        "type": "string",
                        "example": "password"
                    },
                    "client_id": {
                        "description": "Your rest API username/client_id.",
                        "type": "string",
                        "example": "api.username.examples"
                    },
                    "client_secret": {
                        "description": "Your rest API password/secret.",
                        "type": "string",
                        "example": "69RqIxU1iUaYXf2QPKD4l2PGxQjqfCqQL2dSD9ZW"
                    },
                    "username": {
                        "description": "LeadDesk user's username.",
                        "type": "string",
                        "example": "john.doe.admin"
                    },
                    "password": {
                        "description": "Password for the given LeadDesk user.",
                        "type": "string",
                        "example": "MMtG39jk0a8f"
                    }
                },
                "xml": {
                    "name": "OAuthPasswordGrantRequest"
                }
            },
            "OAuthLeadDeskClientGrantRequest": {
                "required": [
                    "grant_type",
                    "client_id",
                    "client_secret",
                    "leaddesk_client_id"
                ],
                "properties": {
                    "grant_type": {
                        "description": "Must be 'leaddesk_client_id' for leaddesk client grant.",
                        "type": "string",
                        "example": "leaddesk_client_id"
                    },
                    "client_id": {
                        "description": "Your rest API username/client_id.",
                        "type": "string",
                        "example": "api.username.examples"
                    },
                    "client_secret": {
                        "description": "Your rest API password/secret.",
                        "type": "string",
                        "example": "69RqIxU1iUaYXf2QPKD4l2PGxQjqfCqQL2dSD9ZW"
                    },
                    "leaddesk_client_id": {
                        "description": "LeadDesk customer/client id",
                        "type": "integer",
                        "example": 134
                    }
                },
                "xml": {
                    "name": "OAuthLeadDeskClientGrantRequest"
                }
            },
            "OAuthLeadDeskUserGrantRequest": {
                "required": [
                    "grant_type",
                    "client_id",
                    "client_secret",
                    "username",
                    "leaddesk_client_id"
                ],
                "properties": {
                    "grant_type": {
                        "description": "Must be 'client_user' for leaddesk client user grant.",
                        "type": "string",
                        "example": "client_user"
                    },
                    "client_id": {
                        "description": "Your rest API username/client_id.",
                        "type": "string",
                        "example": "api.username.examples"
                    },
                    "client_secret": {
                        "description": "Your rest API password/secret.",
                        "type": "string",
                        "example": "69RqIxU1iUaYXf2QPKD4l2PGxQjqfCqQL2dSD9ZW"
                    },
                    "username": {
                        "description": "LeadDesk user's username.",
                        "type": "string",
                        "example": "john.doe.admin"
                    },
                    "leaddesk_client_id": {
                        "description": "LeadDesk customer/client id",
                        "type": "integer",
                        "example": 134
                    }
                },
                "xml": {
                    "name": "OAuthLeadDeskUserGrantRequest"
                }
            },
            "OAuthRefreshGrantRequest": {
                "required": [
                    "grant_type",
                    "client_id",
                    "client_secret",
                    "refresh_token"
                ],
                "properties": {
                    "grant_type": {
                        "description": "Must be 'refresh_token' for refresh grant.",
                        "type": "string",
                        "example": "refresh_token"
                    },
                    "client_id": {
                        "description": "Your rest API username/client_id.",
                        "type": "string",
                        "example": "api.username.examples"
                    },
                    "client_secret": {
                        "description": "Your rest API password/secret.",
                        "type": "string",
                        "example": "69RqIxU1iUaYXf2QPKD4l2PGxQjqfCqQL2dSD9ZW"
                    },
                    "refresh_token": {
                        "description": "Refresh token received during previous authentication process.",
                        "type": "string",
                        "example": "OCqak57Um37Hacuw9vwbufnCWiRgqhiuUwKN4k9S"
                    }
                },
                "xml": {
                    "name": "OAuthRefreshGrantRequest"
                }
            },
            "OAuthAccessTokenResponse": {
                "properties": {
                    "access_token": {
                        "description": "Access token that is used to make authorized requests to API resources.",
                        "type": "string",
                        "example": "CHGK3f04In4Zn6Kp6rfsUZlrJJCzXJH5wSAqAY2j"
                    },
                    "token_type": {
                        "description": "Token type enumeration. At the moment can only be 'Bearer'.",
                        "type": "string",
                        "example": "Bearer"
                    },
                    "expires_in": {
                        "description": "How many seconds the access token is valid. After expiry you can refresh to get a new access token. See Refresh Grant for more info.",
                        "type": "int",
                        "example": 3600
                    },
                    "refresh_token": {
                        "description": "Refresh token that can be used to get new access code with same permissions while invalidating the current access_token. See Refresh Grant for more info.",
                        "type": "string",
                        "example": "9ufdtxPDrkpGywUB4Wm6Rot8rejfQAwXkQCgB4v0"
                    }
                },
                "xml": {
                    "name": "OAuthAccessTokenResponse"
                }
            },
            "ProductGroupSearchableFields": {
                "properties": {
                    "name": {
                        "description": "Product group name",
                        "type": "string"
                    },
                    "office": {
                        "description": "Product group office",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "ProductGroupSearchableFields"
                }
            },
            "PostProductGroup": {
                "properties": {
                    "name": {
                        "description": "Product group name",
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 1,
                        "example": "product group A"
                    },
                    "sponsor": {
                        "description": "Sponsor name",
                        "type": "string",
                        "example": "LeadDesk"
                    },
                    "office": {
                        "description": "Office name",
                        "type": "string",
                        "example": "office B"
                    },
                    "desc": {
                        "description": "Free text description of the group",
                        "type": "string"
                    },
                    "products": {
                        "description": "Product group products",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/genericIdObject"
                        }
                    }
                },
                "xml": {
                    "name": "PostProductGroup"
                }
            },
            "PatchProductGroup": {
                "properties": {
                    "name": {
                        "description": "Product group name",
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 1,
                        "example": "product group A"
                    },
                    "sponsor": {
                        "description": "Sponsor name",
                        "type": "string",
                        "example": "LeadDesk"
                    },
                    "office": {
                        "description": "Office name",
                        "type": "string",
                        "example": "office B"
                    },
                    "desc": {
                        "description": "Free text description of the group",
                        "type": "string"
                    },
                    "products": {
                        "description": "Product group products",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/genericIdObject"
                        }
                    }
                },
                "xml": {
                    "name": "PatchProductGroup"
                }
            },
            "ProductOptionSearchableFields": {
                "properties": {
                    "name": {
                        "description": "Product option name",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "ProductOptionSearchableFields"
                }
            },
            "ProductSearchableFields": {
                "properties": {
                    "name": {
                        "description": "Product name",
                        "type": "string"
                    },
                    "office": {
                        "description": "Product office",
                        "type": "string"
                    },
                    "product_code": {
                        "description": "Product code",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "ProductSearchableFields"
                }
            },
            "PostProductInput": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Product name",
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "description": {
                        "description": "Product description",
                        "type": "string"
                    },
                    "product_code": {
                        "description": "Product code",
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "office": {
                        "description": "Product office",
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 1
                    }
                },
                "xml": {
                    "name": "PostProductInput"
                }
            },
            "PatchProductInput": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Product name",
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "description": {
                        "description": "Product description",
                        "type": "string"
                    },
                    "product_code": {
                        "description": "Product code",
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "office": {
                        "description": "Product office",
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 1
                    }
                },
                "xml": {
                    "name": "PatchProductInput"
                }
            },
            "UserLoginToken": {
                "properties": {
                    "token": {
                        "description": "Login token JWT",
                        "type": "string",
                        "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJleHAiOjE1MzI5MzA4MTEsInVzZXIiOjEsIm1ldGEiOm51bGx9.JV4R5jLSyT0QFo6DEG37U53U5LUruw-87oMrg8vAJpyxEGrUWrvUu5vbLwz2qIP4xs5gBF0IC0gklCzHTO1cJQ"
                    },
                    "expires": {
                        "description": "Time when login token expires",
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-07-30T08:00:00+03:00"
                    }
                },
                "xml": {
                    "name": "UserLoginToken"
                }
            },
            "SkillInput": {
                "properties": {
                    "id": {
                        "description": "Skill id",
                        "type": "integer",
                        "minimum": 1
                    },
                    "points": {
                        "description": "User's points for current skill",
                        "type": "integer",
                        "maximum": 10,
                        "minimum": 1
                    }
                },
                "xml": {
                    "name": "SkillInput"
                }
            },
            "GdprAgentCall": {
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "call_recording": {
                        "type": "string"
                    },
                    "phone_number": {
                        "type": "string"
                    },
                    "result": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "direction": {
                        "type": "string",
                        "enum": [
                            "in",
                            "out"
                        ]
                    },
                    "status": {
                        "type": "string"
                    },
                    "duration": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "GdprAgentCall"
                }
            },
            "GdprOrder": {
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "order_recording": {
                        "type": "string"
                    },
                    "invoicing_details": {
                        "properties": {
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            },
                            "company": {
                                "type": "string"
                            },
                            "title": {
                                "type": "string"
                            },
                            "address": {
                                "type": "string"
                            },
                            "postal_code": {
                                "type": "string"
                            },
                            "city": {
                                "type": "string"
                            },
                            "country": {
                                "type": "string"
                            },
                            "phone_number": {
                                "type": "string"
                            },
                            "ssc": {
                                "type": "string"
                            },
                            "email": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "delivery_details": {
                        "properties": {
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            },
                            "company": {
                                "type": "string"
                            },
                            "title": {
                                "type": "string"
                            },
                            "address": {
                                "type": "string"
                            },
                            "postal_code": {
                                "type": "string"
                            },
                            "city": {
                                "type": "string"
                            },
                            "country": {
                                "type": "string"
                            },
                            "phone_number": {
                                "type": "string"
                            },
                            "ssc": {
                                "type": "string"
                            },
                            "email": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "xml": {
                    "name": "GdprOrder"
                }
            },
            "GdprTransfer": {
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "phone_number": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "GdprTransfer"
                }
            },
            "GdprCallback": {
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "phone_number": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "GdprCallback"
                }
            },
            "GdprContact": {
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "last_name": {
                        "type": "string"
                    },
                    "gender": {
                        "type": "string"
                    },
                    "company": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "ssc": {
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "postal_code": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "vatin": {
                        "type": "string"
                    },
                    "www": {
                        "type": "string"
                    },
                    "year_of_birth": {
                        "type": "string"
                    },
                    "phone_numbers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "xml": {
                    "name": "GdprContact"
                }
            },
            "GdprQueueCall": {
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "caller_phone_number": {
                        "type": "string"
                    },
                    "queue_phone_number": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "GdprQueueCall"
                }
            },
            "GdprEmail": {
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "from": {
                        "type": "string"
                    },
                    "to": {
                        "type": "string"
                    },
                    "cc": {
                        "type": "string"
                    },
                    "subject": {
                        "type": "string"
                    },
                    "content": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "direction": {
                        "type": "string",
                        "enum": [
                            "in",
                            "out"
                        ]
                    },
                    "result": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "GdprEmail"
                }
            },
            "GdprSms": {
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "receiver": {
                        "type": "string"
                    },
                    "sender": {
                        "type": "string"
                    },
                    "content": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "GdprSms"
                }
            },
            "GdprRobotCall": {
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "phone_number": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "GdprRobotCall"
                }
            },
            "GdprPhonebookContact": {
                "properties": {
                    "phone_number": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "GdprPhonebookContact"
                }
            },
            "GdprCalendarOrder": {
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "last_name": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "phone_number": {
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "postal_code": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string"
                    },
                    "company": {
                        "type": "string"
                    },
                    "vatin": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "GdprCalendarOrder"
                }
            },
            "GdprCalendarMeeting": {
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "meeting_title": {
                        "type": "string"
                    },
                    "attendee_emails": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "sms_reminder_phone_number": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "GdprCalendarMeeting"
                }
            },
            "GdprManuscriptResult": {
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "manuscript_name": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "xml": {
                    "name": "GdprManuscriptResult"
                }
            },
            "Activity": {
                "properties": {
                    "id": {
                        "description": "Activity id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Activity name",
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "billable": {
                        "description": "Is activity billable",
                        "type": "integer"
                    },
                    "payable": {
                        "description": "Is activity payable",
                        "type": "integer"
                    },
                    "internal": {
                        "description": "Is activity considered internal (it cannot be renamed or deleted)",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "Activity"
                }
            },
            "ArchivedContactList": {
                "properties": {
                    "id": {
                        "description": "Contact list id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Contact list name",
                        "type": "string"
                    },
                    "legend": {
                        "description": "Contact list description",
                        "type": "string"
                    },
                    "group": {
                        "description": "Contact list group name",
                        "type": "string"
                    },
                    "office": {
                        "description": "Contact list office",
                        "type": "string"
                    },
                    "sponsor": {
                        "description": "Contact list sponsor name",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Contact list creation date",
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-04-25T13:50:58+00:00"
                    },
                    "updated_at": {
                        "description": "Contact list last updated date",
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-04-25T13:50:58+00:00"
                    },
                    "expiry_date": {
                        "description": "Contact list expiration date",
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-04-25T00:00:00+00:00"
                    }
                },
                "xml": {
                    "name": "ArchivedContactList"
                }
            },
            "CallObject": {
                "properties": {
                    "id": {
                        "description": "call id",
                        "type": "integer"
                    },
                    "number": {
                        "description": "Call phone number",
                        "type": "string"
                    },
                    "campaign": {
                        "description": "Active campaign",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        }
                    },
                    "result": {
                        "$ref": "#/components/schemas/CallResult"
                    },
                    "record_file": {
                        "description": "Call recording file url",
                        "type": "string"
                    },
                    "comment": {
                        "description": "Call comment",
                        "type": "string"
                    },
                    "direction": {
                        "description": "Call direction. In or out",
                        "type": "string"
                    },
                    "caller": {
                        "$ref": "#/components/schemas/User"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/Contact"
                    },
                    "contact_list": {
                        "$ref": "#/components/schemas/ContactList"
                    },
                    "answered": {
                        "description": "Call was answered",
                        "type": "boolean"
                    },
                    "called_at": {
                        "description": "time when call was made",
                        "type": "string"
                    },
                    "ringing_started_at": {
                        "description": "time when call started ringing",
                        "type": "string"
                    },
                    "ringing_ended_at": {
                        "description": "time when call stopped ringing",
                        "type": "string"
                    },
                    "connected_at": {
                        "description": "time when call was connected",
                        "type": "string"
                    },
                    "disconnected_at": {
                        "description": "time when call was disconnected",
                        "type": "string"
                    },
                    "_links": {
                        "properties": {
                            "self": {
                                "type": "string"
                            }
                        }
                    }
                },
                "xml": {
                    "name": "CallObject"
                }
            },
            "CallResult": {
                "properties": {
                    "id": {
                        "description": "Result id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Result name",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "CallResult"
                }
            },
            "CallRobotObject": {
                "properties": {
                    "id": {
                        "description": "Robot id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Robot name",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "CallRobotObject"
                }
            },
            "Callback": {
                "properties": {
                    "id": {
                        "description": "Callback id",
                        "type": "integer"
                    }
                },
                "xml": {
                    "name": "Callback"
                }
            },
            "CampaignObject": {
                "properties": {
                    "id": {
                        "description": "Campaign id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Campaign name",
                        "type": "string"
                    },
                    "desc": {
                        "description": "Campaign description",
                        "type": "string"
                    },
                    "office": {
                        "description": "Campaign office",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Campaign creation date",
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "Campaign last updated date",
                        "type": "string"
                    },
                    "disabled": {
                        "description": "Is campaign disabled. NOTE! Users cannot be attached to disabled campaign. If campaign is disabled current users are detached",
                        "type": "boolean"
                    },
                    "sponsor": {
                        "description": "Sponsor name",
                        "type": "string"
                    },
                    "contactmanager_id": {
                        "description": "Contact manager id (user id)",
                        "type": "integer"
                    },
                    "call_methods": {
                        "properties": {
                            "progressive": {
                                "properties": {
                                    "enabled": {
                                        "description": "Is progressive (automatic/semi-automatic) call tab enabled.",
                                        "type": "boolean"
                                    },
                                    "pause_before_call": {
                                        "description": "Is pause before call enabled (aka semi-automatic) enabled.",
                                        "type": "boolean"
                                    },
                                    "user_selection": {
                                        "description": "Is user selection enabled (user can choose between progressive and pause before call).",
                                        "type": "boolean"
                                    }
                                }
                            },
                            "contact_list": {
                                "properties": {
                                    "enabled": {
                                        "description": "Is contact list tab enabled.",
                                        "type": "boolean"
                                    }
                                }
                            },
                            "b2b": {
                                "properties": {
                                    "enabled": {
                                        "description": "Is B2B tab enabled.",
                                        "type": "boolean"
                                    }
                                }
                            },
                            "manual": {
                                "properties": {
                                    "enabled": {
                                        "description": "Is manual call tab enabled.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    },
                    "optional_settings": {
                        "$ref": "#/components/schemas/optionalSettings"
                    },
                    "contact_settings": {
                        "properties": {
                            "fields": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/contactSettings"
                                }
                            }
                        }
                    },
                    "products": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/genericIdObject"
                        }
                    },
                    "product_groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/genericIdObject"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/genericIdObject"
                        }
                    },
                    "contact_lists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/contactListIdAndWeight"
                        }
                    },
                    "_links": {
                        "properties": {
                            "self": {
                                "type": "string"
                            },
                            "custom_fields": {
                                "type": "string"
                            }
                        }
                    }
                },
                "xml": {
                    "name": "CampaignObject"
                }
            },
            "callMethods": {
                "properties": {
                    "progressive": {
                        "properties": {
                            "enabled": {
                                "description": "Is progressive (automatic/semi-automatic) call tab enabled.",
                                "type": "boolean"
                            },
                            "pause_before_call": {
                                "description": "Is pause before call enabled (aka semi-automatic) enabled.",
                                "type": "boolean"
                            },
                            "user_selection": {
                                "description": "Is user selection enabled (user can choose between progressive and pause before call).",
                                "type": "boolean"
                            }
                        }
                    },
                    "contact_list": {
                        "properties": {
                            "enabled": {
                                "description": "Is contact list tab enabled.",
                                "type": "boolean"
                            }
                        }
                    },
                    "b2b": {
                        "properties": {
                            "enabled": {
                                "description": "Is B2B tab enabled.",
                                "type": "boolean"
                            }
                        }
                    },
                    "manual": {
                        "properties": {
                            "enabled": {
                                "description": "Is manual call tab enabled.",
                                "type": "boolean"
                            }
                        }
                    }
                },
                "xml": {
                    "name": "callMethods"
                }
            },
            "optionalSettings": {
                "properties": {
                    "campaign_url_1": {
                        "properties": {
                            "url": {
                                "description": "Campaign url 1 URL",
                                "type": "string"
                            },
                            "name": {
                                "description": "Campaign url 1 customized name",
                                "type": "string"
                            }
                        }
                    },
                    "campaign_url_2": {
                        "properties": {
                            "url": {
                                "description": "Campaign url 2 URL",
                                "type": "string"
                            },
                            "name": {
                                "description": "Campaign url 2 customized name",
                                "type": "string"
                            }
                        }
                    },
                    "external_url": {
                        "properties": {
                            "url": {
                                "description": "External url",
                                "type": "string"
                            }
                        }
                    }
                },
                "xml": {
                    "name": "optionalSettings"
                }
            },
            "contactSettings": {
                "properties": {
                    "name": {
                        "description": "Contact field name. Run GET /campaigns/{id} to get full list of field names",
                        "type": "string"
                    },
                    "type": {
                        "description": "Contact field type. Define whether field is text or dropdown etc",
                        "type": "string",
                        "default": "text",
                        "enum": [
                            "text",
                            "dropdown"
                        ]
                    },
                    "values": {
                        "description": "If field is for example of type dropdown, define possible values here. Can also be empty -> dropdown has no values",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/contactSettingValues"
                        }
                    },
                    "hidden": {
                        "description": "Make contact field invisible",
                        "type": "boolean"
                    },
                    "mandatory_contact_detail": {
                        "description": "Make filling of contact field mandatory",
                        "type": "boolean"
                    },
                    "mandatory_order_detail": {
                        "description": "Make filling of contact field mandatory for an order",
                        "type": "boolean"
                    }
                },
                "xml": {
                    "name": "contactSettings"
                }
            },
            "contactSettingValues": {
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "contactSettingValues"
                }
            },
            "CampaignSetting": {
                "properties": {
                    "name": {
                        "description": "Campaign setting name",
                        "type": "string"
                    },
                    "value": {
                        "description": "Campaign setting value",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "CampaignSetting"
                }
            },
            "ActivityCollection": {
                "properties": {
                    "id": {
                        "description": "Activity id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Activity name",
                        "type": "string"
                    },
                    "billable": {
                        "description": "Is activity billable",
                        "type": "integer"
                    },
                    "payable": {
                        "description": "Is activity payable",
                        "type": "integer"
                    },
                    "internal": {
                        "description": "Is activity considered internal (it cannot be renamed or deleted)",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "ActivityCollection"
                }
            },
            "ArchivedContactListCollection": {
                "properties": {
                    "id": {
                        "description": "Contact list id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Contact list name",
                        "type": "string"
                    },
                    "legend": {
                        "description": "Contact list description",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Contact list creation date",
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-04-25T13:50:58+00:00"
                    },
                    "updated_at": {
                        "description": "Contact list last updated date",
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-04-25T13:50:58+00:00"
                    },
                    "office": {
                        "description": "Contact list office",
                        "type": "string"
                    },
                    "expiry_date": {
                        "description": "Contact list expiration date",
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-04-25T00:00:00+00:00"
                    },
                    "contacts_total": {
                        "description": "Contacts total",
                        "type": "integer"
                    },
                    "contacts_remaining": {
                        "description": "Contacts remaining",
                        "type": "integer"
                    },
                    "group": {
                        "description": "Contact list group name",
                        "type": "string"
                    },
                    "sponsor": {
                        "description": "Contact list sponsor name",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "ArchivedContactListCollection"
                }
            },
            "CallRobotCollection": {
                "properties": {
                    "id": {
                        "description": "Call robot id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Call robot name",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "CallRobotCollection"
                }
            },
            "CampaignCollection": {
                "properties": {
                    "id": {
                        "description": "Campaign id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Campaign name",
                        "type": "string"
                    },
                    "desc": {
                        "description": "Campaign description",
                        "type": "string"
                    },
                    "office": {
                        "description": "Campaign office",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Campaign creation date",
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "Campaign last updated date",
                        "type": "string"
                    },
                    "disabled": {
                        "description": "Is campaign disabled",
                        "type": "boolean"
                    }
                },
                "xml": {
                    "name": "CampaignCollection"
                }
            },
            "ContactListCollection": {
                "properties": {
                    "id": {
                        "description": "Contact list id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Contact list name",
                        "type": "string"
                    },
                    "legend": {
                        "description": "Contact list description",
                        "type": "string"
                    },
                    "group": {
                        "description": "Contact list group name",
                        "type": "string"
                    },
                    "office": {
                        "description": "Contact list office",
                        "type": "string"
                    },
                    "sponsor": {
                        "description": "Contact list sponsor name",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Contact list creation date",
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "Contact list last updated date",
                        "type": "string"
                    },
                    "expiry_date": {
                        "description": "Contact list expiration date",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "ContactListCollection"
                }
            },
            "InboundQueueCollection": {
                "properties": {
                    "id": {
                        "description": "Queue id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Queue name",
                        "type": "string"
                    },
                    "number": {
                        "description": "Queue phone number",
                        "type": "string"
                    },
                    "extension": {
                        "description": "Queue VoIP extension",
                        "type": "string"
                    },
                    "campaign_id": {
                        "description": "Campaign that queue is attached to",
                        "type": "integer"
                    },
                    "enabled": {
                        "description": "Is inbound queue in use",
                        "type": "boolean"
                    }
                },
                "xml": {
                    "name": "InboundQueueCollection"
                }
            },
            "InboundQueueCollectionSkills": {
                "xml": {
                    "name": "InboundQueueCollectionSkills"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/InboundQueueCollection"
                    },
                    {
                        "properties": {
                            "skills": {
                                "description": "Collection of queue's inbound skills",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Skill"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "PublicKeyPem": {
                "properties": {
                    "kid": {
                        "description": "key id",
                        "type": "integer",
                        "example": 1
                    },
                    "kty": {
                        "description": "Key type",
                        "type": "string",
                        "enum": [
                            "RSA"
                        ],
                        "example": "RSA"
                    },
                    "use": {
                        "description": "Key usage",
                        "type": "string",
                        "enum": [
                            "sig"
                        ],
                        "example": "sig"
                    },
                    "alg": {
                        "description": "Key algorithm",
                        "type": "string",
                        "enum": [
                            "RS256"
                        ],
                        "example": "RS256"
                    },
                    "key": {
                        "description": "Public key in PEM format",
                        "type": "string",
                        "example": "-----BEGIN PUBLIC KEY-----\\r\\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDdlatRjRjogo3WojgGHFHYLugdUWAY9iR3fy4arWNA1KoS8kVw33cJibXr8bvwUAUparCwlvdbH6dvEOfou0/gCFQsHUfQrSDv+MuSUMAe8jzKE4qW+jK+xQU9a03GUnKHkkle+Q0pX/g6jXZ7r1/xAK5Do2kQ+X5xK9cipRgEKwIDAQAB\\r\\n-----END PUBLIC KEY-----"
                    }
                },
                "xml": {
                    "name": "PublicKeyPem"
                }
            },
            "OauthClientCollection": {
                "properties": {
                    "id": {
                        "description": "OAuth client id",
                        "type": "string",
                        "example": "PCEmnxLXNdUzc46kANjhPzv7BEj56zXB2AwB5qFW"
                    },
                    "secret": {
                        "description": "OAuth client secret",
                        "type": "string",
                        "example": "Sh5AfhRHQBO4NNIlLVtHIP8CTftJybtj5U5cOANX"
                    },
                    "name": {
                        "description": "Name of the OAuth client",
                        "type": "string",
                        "example": "My first OAuth client"
                    },
                    "created_at": {
                        "description": "Time when the OAuth client was created",
                        "type": "datetime",
                        "example": "2019-03-18T12:06:17+02:00"
                    },
                    "creator_id": {
                        "description": "Original creator of the OAuth client. Null if user was not identifiable.",
                        "type": "integer",
                        "example": 11356698937127
                    }
                },
                "xml": {
                    "name": "OauthClientCollection"
                }
            },
            "ProductCollection": {
                "properties": {
                    "id": {
                        "description": "Product id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Product name",
                        "type": "string"
                    },
                    "description": {
                        "description": "Product description",
                        "type": "string"
                    },
                    "product_code": {
                        "description": "Product code",
                        "type": "string"
                    },
                    "office": {
                        "description": "Product office",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Product creation date",
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "Product last updated date",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "ProductCollection"
                }
            },
            "ProductGroupCollection": {
                "properties": {
                    "id": {
                        "description": "Product group id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Product group name",
                        "type": "string"
                    },
                    "office": {
                        "description": "Product group office",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "ProductGroupCollection"
                }
            },
            "ProductOptionCollection": {
                "properties": {
                    "id": {
                        "description": "Product option id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Product option name",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "ProductOptionCollection"
                }
            },
            "UserCollection": {
                "properties": {
                    "id": {
                        "description": "User id",
                        "type": "integer"
                    },
                    "role": {
                        "description": "User role (admin, manager, team leader, agent etc)",
                        "type": "string"
                    },
                    "name": {
                        "description": "User full name",
                        "type": "string"
                    },
                    "username": {
                        "description": "User username",
                        "type": "string"
                    },
                    "office": {
                        "description": "User office",
                        "type": "string"
                    },
                    "employment": {
                        "description": "User employment status",
                        "type": "string",
                        "enum": [
                            "inactive",
                            "active"
                        ]
                    },
                    "login_time": {
                        "description": "User last login time",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "User creation date",
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "User last updated date",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "UserCollection"
                }
            },
            "UserCollectionSkills": {
                "xml": {
                    "name": "UserCollectionSkills"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/UserCollection"
                    },
                    {
                        "properties": {
                            "skills": {
                                "description": "Collection of user inbound skills",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SkillWithPoints"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "CompanyStatus": {
                "properties": {
                    "id": {
                        "description": "Company status id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Company status name",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "CompanyStatus"
                }
            },
            "Contact": {
                "properties": {
                    "id": {
                        "description": "Contact id",
                        "type": "integer"
                    },
                    "first_name": {
                        "description": "Contact firstname",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "Contact surname",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "Contact"
                }
            },
            "ContactList": {
                "properties": {
                    "id": {
                        "description": "Contact list id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Contact list name",
                        "type": "string"
                    },
                    "legend": {
                        "description": "Contact list description",
                        "type": "string"
                    },
                    "group": {
                        "description": "Contact list group name",
                        "type": "string"
                    },
                    "office": {
                        "description": "Contact list office",
                        "type": "string"
                    },
                    "sponsor": {
                        "description": "Contact list sponsor name",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Contact list creation date",
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "Contact list last updated date",
                        "type": "string"
                    },
                    "expiry_date": {
                        "description": "Contact list expiration date",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "ContactList"
                }
            },
            "CustomAppFunction": {
                "properties": {
                    "id": {
                        "description": "Custom application function id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Custom application function name",
                        "type": "string"
                    },
                    "location": {
                        "description": "Location for the application function",
                        "type": "string",
                        "enum": [
                            "admin.contact-lists.toolbar",
                            "admin.campaign-list.toolbar"
                        ]
                    },
                    "url": {
                        "description": "URL pointing to custom application endpoint",
                        "type": "string"
                    },
                    "width": {
                        "description": "Custom application function dialog width in pixels",
                        "type": "integer"
                    },
                    "height": {
                        "description": "Custom application function dialog height in pixels",
                        "type": "integer"
                    },
                    "icon": {
                        "description": "This value can point directly to URL holding the icon image. Other option is to create JSON {'url': '', 'icon':'glyphicon', 'iconColor':''}",
                        "type": "string"
                    },
                    "sandbox": {
                        "description": "Iframe sandbox attributes (separated by space)",
                        "type": "string",
                        "enum": [
                            "allow-forms",
                            "allow-pointer-lock",
                            "allow-popups",
                            "allow-same-origin",
                            "allow-scripts",
                            "allow-top-navigation"
                        ]
                    }
                },
                "xml": {
                    "name": "CustomAppFunction"
                }
            },
            "CustomAppFunctionObject": {
                "xml": {
                    "name": "CustomAppFunctionObject"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CustomAppFunction"
                    },
                    {
                        "properties": {
                            "_links": {
                                "items": {
                                    "$ref": "#/components/schemas/linksObjects"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "CustomPage": {
                "properties": {
                    "id": {
                        "description": "Custom page id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Custom page name",
                        "type": "string"
                    },
                    "location": {
                        "description": "Location for the custom page",
                        "type": "string",
                        "enum": [
                            "dashboard",
                            "statistics",
                            "campaigns",
                            "agents_mng",
                            "calling_list_management",
                            "product",
                            "b2b_mng",
                            "qatab",
                            "inbound",
                            "general_settings"
                        ]
                    },
                    "url": {
                        "description": "Custom page URL",
                        "type": "string"
                    },
                    "sandbox": {
                        "description": "Iframe sandbox attributes (separated by space)",
                        "type": "string",
                        "enum": [
                            "allow-forms",
                            "allow-pointer-lock",
                            "allow-popups",
                            "allow-same-origin",
                            "allow-scripts",
                            "allow-top-navigation"
                        ]
                    },
                    "height": {
                        "description": "Custom page iframe height in pixels",
                        "type": "integer"
                    }
                },
                "xml": {
                    "name": "CustomPage"
                }
            },
            "CustomPageObject": {
                "xml": {
                    "name": "CustomPageObject"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CustomPage"
                    },
                    {
                        "properties": {
                            "_links": {
                                "items": {
                                    "$ref": "#/components/schemas/linksObjects"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "CustomPageBlock": {
                "properties": {
                    "id": {
                        "description": "Custom page block id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Custom page block name",
                        "type": "string"
                    },
                    "location": {
                        "description": "Location for the custom page",
                        "type": "string",
                        "enum": [
                            "campaign-editor"
                        ]
                    },
                    "url": {
                        "description": "Custom page block URL",
                        "type": "string"
                    },
                    "sandbox": {
                        "description": "Iframe sandbox attributes (separated by space)",
                        "type": "string",
                        "enum": [
                            "allow-forms",
                            "allow-pointer-lock",
                            "allow-popups",
                            "allow-same-origin",
                            "allow-scripts",
                            "allow-top-navigation"
                        ]
                    },
                    "height": {
                        "description": "Custom page block iframe height in pixels",
                        "type": "integer"
                    }
                },
                "xml": {
                    "name": "CustomPageBlock"
                }
            },
            "CustomPageBlockObject": {
                "xml": {
                    "name": "CustomPageBlockObject"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CustomPageBlock"
                    },
                    {
                        "properties": {
                            "_links": {
                                "items": {
                                    "$ref": "#/components/schemas/linksObjects"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "InboundQueue": {
                "properties": {
                    "id": {
                        "description": "Inbound queue id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Inbound queue name",
                        "type": "string"
                    },
                    "number": {
                        "description": "Inbound queue phone number",
                        "type": "string"
                    },
                    "extension": {
                        "description": "Inbound queue VoIP extension name",
                        "type": "string"
                    },
                    "campaign_id": {
                        "description": "Campaign id queue is attached to",
                        "type": "integer"
                    },
                    "enabled": {
                        "description": "Is inbound queue in use",
                        "type": "boolean"
                    }
                },
                "xml": {
                    "name": "InboundQueue"
                }
            },
            "OauthClient": {
                "properties": {
                    "id": {
                        "description": "OAuth client id",
                        "type": "string",
                        "example": "PCEmnxLXNdUzc46kANjhPzv7BEj56zXB2AwB5qFW"
                    },
                    "secret": {
                        "description": "OAuth client secret",
                        "type": "string",
                        "example": "Sh5AfhRHQBO4NNIlLVtHIP8CTftJybtj5U5cOANX"
                    },
                    "name": {
                        "description": "Name of the OAuth client",
                        "type": "string",
                        "example": "My first OAuth client"
                    },
                    "created_at": {
                        "description": "Time when the OAuth client was created",
                        "type": "datetime",
                        "example": "2019-03-18T12:06:17+02:00"
                    },
                    "creator_id": {
                        "description": "Original creator of the OAuth client. Null if user was not identifiable.",
                        "type": "integer",
                        "example": 11356698937127
                    }
                },
                "xml": {
                    "name": "OauthClient"
                }
            },
            "ProductObject": {
                "properties": {
                    "id": {
                        "description": "Product id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Product name",
                        "type": "string"
                    },
                    "description": {
                        "description": "Product description",
                        "type": "string"
                    },
                    "product_code": {
                        "description": "Product code",
                        "type": "string"
                    },
                    "office": {
                        "description": "Product office",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Product creation date",
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "Product last updated date",
                        "type": "string"
                    },
                    "_links": {
                        "properties": {
                            "self": {
                                "type": "string"
                            },
                            "custom_fields": {
                                "type": "string"
                            }
                        }
                    }
                },
                "xml": {
                    "name": "ProductObject"
                }
            },
            "ProductGroup": {
                "properties": {
                    "id": {
                        "description": "Product group id",
                        "type": "integer",
                        "example": "1"
                    },
                    "name": {
                        "description": "Product group name",
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 1,
                        "example": "product group A"
                    },
                    "sponsor": {
                        "description": "Sponsor name",
                        "type": "string",
                        "example": "LeadDesk"
                    },
                    "office": {
                        "description": "Office name",
                        "type": "string",
                        "example": "office B"
                    },
                    "desc": {
                        "description": "Free text description of the group",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "group's creation time",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "group's last modification time. Does not include product attachment changes.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "products": {
                        "description": "Product group products",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/genericIdObject"
                        }
                    }
                },
                "xml": {
                    "name": "ProductGroup"
                }
            },
            "ProductOptionObject": {
                "properties": {
                    "id": {
                        "description": "Product option id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Product option name",
                        "type": "string"
                    },
                    "_links": {
                        "properties": {
                            "self": {
                                "type": "string"
                            }
                        }
                    }
                },
                "xml": {
                    "name": "ProductOptionObject"
                }
            },
            "ContactListWithWeight": {
                "properties": {
                    "id": {
                        "description": "Contact list id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Contact list name",
                        "type": "string"
                    },
                    "legend": {
                        "description": "Contact list description",
                        "type": "string"
                    },
                    "group": {
                        "description": "Contact list group name",
                        "type": "string"
                    },
                    "office": {
                        "description": "Contact list office",
                        "type": "string"
                    },
                    "sponsor": {
                        "description": "Contact list sponsor name",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Contact list creation date",
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "Contact list last updated date",
                        "type": "string"
                    },
                    "expiry_date": {
                        "description": "Contact list last expiration date",
                        "type": "string"
                    },
                    "weight": {
                        "description": "Contact list weight",
                        "type": "integer"
                    }
                },
                "xml": {
                    "name": "ContactListWithWeight"
                }
            },
            "Skill": {
                "properties": {
                    "id": {
                        "description": "Skill id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Skill name",
                        "type": "string"
                    },
                    "description": {
                        "description": "Skill description",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "Skill"
                }
            },
            "SkillWithPoints": {
                "xml": {
                    "name": "SkillWithPoints"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Skill"
                    },
                    {
                        "properties": {
                            "points": {
                                "description": "Users points for current skill. This is only visible when skill is loaded through relation",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "Sponsor": {
                "properties": {
                    "id": {
                        "description": "Sponsor id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Sponsor name",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "Sponsor"
                }
            },
            "User": {
                "properties": {
                    "id": {
                        "description": "User id",
                        "type": "integer"
                    },
                    "role": {
                        "description": "User role (admin, manager, team leader, agent etc)",
                        "type": "string"
                    },
                    "name": {
                        "description": "User name",
                        "type": "string"
                    },
                    "username": {
                        "description": "User username",
                        "type": "string"
                    },
                    "office": {
                        "description": "User office",
                        "type": "string"
                    },
                    "employment": {
                        "description": "User employment status",
                        "type": "string",
                        "enum": [
                            "inactive",
                            "active"
                        ]
                    },
                    "login_time": {
                        "description": "User login time. NULL if not logged in.",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "User creation date",
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "User last updated date",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "User"
                }
            },
            "InternalErrorExample": {
                "properties": {
                    "error": {
                        "description": "Logical key of an error",
                        "type": "string",
                        "example": "internal_error"
                    },
                    "error_description": {
                        "description": "Human readable description of an error",
                        "type": "string",
                        "example": "Internal error occured. Code: 35f2f35811352146fdc5eb57afc00d71"
                    }
                },
                "xml": {
                    "name": "InternalErrorExample"
                }
            },
            "NotFoundErrorExample": {
                "properties": {
                    "error": {
                        "description": "Logical key of an error",
                        "type": "string",
                        "example": "not_found"
                    },
                    "error_description": {
                        "description": "Human readable description of an error",
                        "type": "string",
                        "example": "Resource could not be found"
                    }
                },
                "xml": {
                    "name": "NotFoundErrorExample"
                }
            }
        }
    }
}